1.1 信息就是位+上下文：
        1）源程序实际上是一个由0和1组成的位序列，这些位被组织成8个一组，称为字节。每个字节都表示程序中某个文本字符；
        2）“\n”对应的ascii整数值为10；
        3）区分不同数据对象的唯一方法是我们读到这些数据对象时的上下文。比如，在不同的上下文中，同样的字节序列可能表示一个整数，浮点数，字符串或机器指
        令。我们需要了解数字的机器表示方式，因为它们与常见的整数和实数是不同的；
        
1.2 程序被其他程序翻译成不同的格式：
        1）在Unix系统上，从源文件到目标文件的转化是由编译器驱动程序（compiler driver）完成的：
                unix > gcc -o hello hello.c
        2）gcc编译器驱动程序读取源程序文件hello.c，并把它翻译成一个可执行文件hello。这个翻译的过程是分为四个阶段完成的：
                1> 预处理阶段：预处理器（cpp）根据以#开头的命令（directives），修改原始的C程序，插入头文件stdio.h的内容到程序文本中，得到通常以
                .i作为文件扩展名的另一个C程序；
                2> 编译阶段：编译器（ccl）将文本文件hello.i翻译成文本文件hello.s，它包含一个汇编语言程序；
                3> 汇编阶段：接下来，汇编器（as）将hello.s翻译成机器语言指令，把这些指令打包称为一种叫做可重定位（relocatable）目标程序的格式，
                并将结果保存在目标文件hello.o中。hello.o是一个二进制文件；
                4> 链接阶段：请注意，我们的hello程序调用了printf函数，它是标准C库中的一个函数，每个C编译器都提供。printf函数存在于一个名为printf.o
                的单独的预编译目标文件中，而这个文件必须以某种方式并入到我们的hello.o程序中。链接器（ld）就负责处理这种并入，结果就得到hello的可执行
                目标文件；
                
1.3 了解编译系统如何工作是大有益处的：
        1）优化程序性能；        
        2）理解链接时出现的错误；
        3）避免安全漏洞；
        
1.4 处理器读并解释储存在存储器中的指令：
        1.4.1 系统的硬件组成：        
                1）总线：贯穿整个系统的是一组电子管道，称做总线，它携带信息字节并负责在各个部件间传递。通常总线被设计成传送定长的字节快，也就是字
                （word）。字中的字节数（即字长）是一个基本的系统参数；
                2) I/O设备：每个I/O设备都是通过一个控制器或适配器与I/O总线连接起来的。控制器和适配器之间的区别主要在于它们的组成方式。控制器是I/O
                设备本身中或是系统的主印制电路板（通常被称做主板）的芯片组，而适配器则是一块插在主板插槽上的卡。无论如何，它们的功能都是在I/O总线
                和I/O设备之间传递信息；
                3）主存：是一个临时存储设备，在处理器执行程序时，它被用来存放程序和程序处理的数据。逻辑上来说，存储器是由一个线性的字节数组组成的，
                背个字节都有自己唯一的地址（数组索引），这些地址是从零开始的；
                4）处理器：是解释（或执行）存储在主存中指令的引擎。处理器的核心是一个被称为程序计数器（PC）的字长大小的存储设备（或寄存器）。在任何
                一个时间点上，PC都指向主存中的某条机器语言指令（内含其地址）；
                   从系统通电开始，直到系统断电，处理器一直在不假思索地重复执行相同的基本任务：从程序计数器（PC）指向的存储器读取指令，解释指令中的
                位，执行指令指示的简单操作，然后更新程序计数器指向下一个指令；
        1.4.2 执行hello程序：
                
1.5 高速缓存：
        
1.6 形成层次结构的存储设备：

1.7 操作系统管理硬件：
        1）我们可以把操作系统看成是应用程序和硬件之间插入的一层软件。操作系统有两个基本功能：
                1> 防止硬件被失控的应用程序滥用;
                2> 在控制复杂而又通常广泛不同的低级硬件设备方面，为应用程序提供简单一致的方法；
           操作系统通过几个基本的抽象概念（进程、虚拟存储和文件）实现这两个功能。文件是对I/O设备的抽象，虚拟存储器是对主存和磁盘I/O设备的抽象表示，
        进程是对处理器、主存和I/O设备的抽象表示；
        2）1.7.1 进程：
                1> 进程是操作系统对运行程序的一种抽象。在一个系统上可以同时运行多个进程，而每个进程都好像在独占地使用硬件，我们称之为并发运行，实际
                上是说一个进程的指令和另一个进程的指令是交错执行的。操作系统实现这种交错执行的机制称为上下文切换（context switching）；
        3）1.7.2 线程：
                1> 在现代操作系统中，一个进程实际上可以由多个称为线程的执行单元组成，每个线程都运行在进程的上下文中，并共享同样的代码和全局数据；
        4）1.7.3 虚拟存储器：
                1> 虚拟存储器是一个抽象概念，它为每个进程提供了一个假象，好像每个进程都独占地使用主存。每个进程看到的存储器都是一致的，称为虚拟地
                址空间；
                2> 每个进程看到的虚拟地址空间由大量准确定义的区（area）构成，每个区都有专门的功能。从最低的地址开始，逐步向上：
                        <1 程序代码和数据
                        <2 堆: 代码和数据区后紧随着的是运行时堆；
                        <3 共享库：在地址空间的中间附件是一块用来存放像C标准库和数学库这样共享库的代码和数据区域；
                        <4 栈：位于用户虚拟地址空间顶部的是用户栈，编译器用它来实现函数调用；
                        <5 内核虚拟存储器：内核是操作系统总是驻留在存储器中的部分。地址空间顶部的四分之一部分是为内核预留的。基本思想是把一个进程
                        虚拟存储器的内容存储在磁盘上，然后用主存作为磁盘的高速缓存；
        5）1.7.4 文件：
                1> 文件只不过就是字节序列。每个I/O设备，包括磁盘、键盘、显示器，甚至有网络，都可以看成是文件；
                        
1.8 利用网络系统和其他系统通信：











